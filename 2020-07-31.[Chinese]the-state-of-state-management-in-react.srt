1
00:00:00,160 --> 00:00:03,935
我头发现在看起来就像用了 Redux 的代码库

2
00:00:03,936 --> 00:00:09,114
如果每当有一个人来问我要不要学 Redux，
我就能得到一美元

3
00:00:09,115 --> 00:00:10,711
那我应该能有足够钱

4
00:00:10,712 --> 00:00:12,995
去雇佣一名不错的程序员来修复它了

5
00:00:12,996 --> 00:00:15,543
这个想法还挺有意义的

6
00:00:15,544 --> 00:00:18,719
为了让梦想成真，我做了一个这样的网站

7
00:00:18,720 --> 00:00:22,362
网址是 shouldilearnredux.netlify.app

8
00:00:22,363 --> 00:00:27,928
只需要付一美元，就能解锁 “你是否应该学习 Redux”

9
00:00:27,929 --> 00:00:30,014
当你点击这个按钮的时候

10
00:00:30,015 --> 00:00:34,557
底层实现会运行一系列输入到机器学习模型的深度神经网络

11
00:00:34,558 --> 00:00:37,714
神经网络与 if 语句交叉引用（笑死）

12
00:00:37,715 --> 00:00:42,399
通过分析你的浏览历史记录来得出 “你是否应该学习 Redux”

13
00:00:42,400 --> 00:00:44,874
第一次点击按钮会运行得久一点

14
00:00:44,875 --> 00:00:48,959
但它会将结果缓存，之后再点就会快很多

15
00:00:48,960 --> 00:00:50,757
我已经点过一次，付过钱了

16
00:00:50,758 --> 00:00:53,728
我可以给大家看看我的答案

17
00:00:53,729 --> 00:00:55,400
我得到了一个又大又胖的 no

18
00:00:55,401 --> 00:00:58,443
这就是为什么我不用 Redux

19
00:00:58,444 --> 00:01:01,185
但考虑到机器学习的结果并不都是对的

20
00:01:01,186 --> 00:01:06,157
所以在今天这个视频，我想和大家聊聊
我怎么用 Redux，Recoil 和 Context

21
00:01:06,158 --> 00:01:09,100
以及我是怎么看待 React 中的状态管理的

22
00:01:09,130 --> 00:01:12,880
一般在 React App 里会出现三种类型的状态

23
00:01:12,914 --> 00:01:17,756
最常见的是向 API 请求数据并保存数据

24
00:01:17,757 --> 00:01:20,443
通常会用 Redux 来实现

25
00:01:20,444 --> 00:01:22,829
因为 Redux 是一个很通用的状态管理库

26
00:01:22,830 --> 00:01:24,829
所以每个人实现起来可能会不太一样

27
00:01:24,830 --> 00:01:28,160
这个例子只是一种实现

28
00:01:28,190 --> 00:01:33,042
这里用了 useEffect，它会在第一次渲染结束后运行

29
00:01:33,043 --> 00:01:36,320
负责 dispatch 一个 action 从 API 请求一些数据

30
00:01:36,320 --> 00:01:40,700
收到数据后，Redux 会把它存起来，
并且传给这个组件

31
00:01:40,730 --> 00:01:46,080
Redux 的这种用法老让我想到从头做番茄酱的过程

32
00:01:46,080 --> 00:01:50,489
如果你愿意花时间和精力，并且你厨艺还不错

33
00:01:50,490 --> 00:01:52,856
那你做出来的番茄酱可能还不错

34
00:01:52,857 --> 00:01:58,414
但如果你厨艺比较一般，
或者和你共事的厨师比较糟糕

35
00:01:58,415 --> 00:02:01,943
他们味蕾不太行，老是把盐放得很重

36
00:02:01,944 --> 00:02:05,371
留给你的是像意大利面条一样杂乱的代码

37
00:02:05,372 --> 00:02:07,785
面条上还有一些恶心的番茄酱

38
00:02:07,786 --> 00:02:11,928
别担心，我不会让你去买一罐番茄酱

39
00:02:11,929 --> 00:02:14,071
外面卖的都太难吃了

40
00:02:14,072 --> 00:02:17,520
我想告诉你的是，你应该去找你的外婆

41
00:02:17,520 --> 00:02:21,513
她做好了一大罐的番茄酱

42
00:02:21,514 --> 00:02:24,028
就等着你去吃

43
00:02:24,029 --> 00:02:27,440
根据 API 的不同，外婆的名字也不太一样

44
00:02:27,470 --> 00:02:31,440
如果你用 GraphQL，
外婆可能叫做 Apollo 或 Relay

45
00:02:31,470 --> 00:02:35,440
如果你喜欢 Rest，
外婆叫做 React Query 或 SWR

46
00:02:35,470 --> 00:02:40,743
但不管你怎么叫她，最终你都会吃上一口美味的、

47
00:02:40,744 --> 00:02:45,920
为获取和缓存数据度身定制的番茄酱

48
00:02:45,950 --> 00:02:49,680
并且是用新鲜的原材料做的

49
00:02:49,680 --> 00:02:52,870
我知道，有一些应用需要自定义

50
00:02:52,871 --> 00:02:54,560
但对于一般的 React App 来说

51
00:02:54,590 --> 00:02:58,800
使用一个为请求数据而生的库

52
00:02:58,830 --> 00:03:01,678
比起用通用的状态管理库

53
00:03:01,679 --> 00:03:04,128
更能节省你的时间和精力

54
00:03:04,129 --> 00:03:05,642
所以我非常推荐

55
00:03:05,643 --> 00:03:08,329
第二种状态叫做局部状态（Local state）

56
00:03:08,330 --> 00:03:09,900
它是一种存在于客户端的状态

57
00:03:09,901 --> 00:03:13,813
往往只有一个或者几个组件需要访问它

58
00:03:13,814 --> 00:03:15,785
举个例子，你有一个选框

59
00:03:15,786 --> 00:03:19,471
你可以通过勾选或不勾选来控制 UI 的显示与否

60
00:03:19,472 --> 00:03:23,840
对于这种情况，我喜欢用内建的 useState hook 来实现

61
00:03:23,840 --> 00:03:27,686
如果逻辑变复杂了，或者有更多复杂的状态

62
00:03:27,687 --> 00:03:29,242
还可以用 useReducer hook

63
00:03:29,243 --> 00:03:32,886
当然，随着组件增多，或者需求改了

64
00:03:32,887 --> 00:03:35,714
可能有越来越多的组件需要访问那个局部状态

65
00:03:35,736 --> 00:03:39,360
这个时候，你可以把状态提升到最外层组件

66
00:03:39,390 --> 00:03:42,560
通过 props 传递给需要的组件

67
00:03:42,560 --> 00:03:45,799
但它其实已经不再是一个局部状态了

68
00:03:45,800 --> 00:03:49,256
这就引出了下一种状态——“全局”状态

69
00:03:49,257 --> 00:03:51,120
我给“全局”加上了引号

70
00:03:51,150 --> 00:03:55,760
并不是说这个状态会在整个应用中都被用到

71
00:03:55,790 --> 00:03:59,639
而是它不再需要通过向下传递 props

72
00:03:59,640 --> 00:04:02,070
这种有点麻烦的方式来得到

73
00:04:02,071 --> 00:04:07,280
举个例子，假如这里有一个可隐藏和显示的边栏

74
00:04:07,280 --> 00:04:11,242
它由页面顶部的一个按钮来控制

75
00:04:11,243 --> 00:04:15,120
也就是说你想通过顶部按钮来控制边栏

76
00:04:15,150 --> 00:04:18,880
但“顶部”和“边栏”在组件树中天各一方

77
00:04:18,910 --> 00:04:22,029
遇到这种情况，我喜欢用 React Context 来处理

78
00:04:22,030 --> 00:04:25,028
或者用我喜欢的状态管理库来处理

79
00:04:25,029 --> 00:04:27,199
最近，我比较喜欢的是 Zustand

80
00:04:27,200 --> 00:04:30,742
因为它不需要把整个 React App 包裹在 Provider 里

81
00:04:30,743 --> 00:04:31,699
非常友好

82
00:04:31,700 --> 00:04:34,628
但老实说，有很多状态管理库可选

83
00:04:34,629 --> 00:04:36,719
你喜欢哪个就用哪个

84
00:04:36,720 --> 00:04:39,699
在使用状态管理库或 React Context 的时候

85
00:04:39,700 --> 00:04:42,800
你不用处理太多的状态

86
00:04:42,800 --> 00:04:45,314
其实就好比撒了点佐料

87
00:04:45,315 --> 00:04:50,320
大多数的状态交给数据请求库里的 useState 来处理就好

88
00:04:50,340 --> 00:04:53,329
可能有人注意到我一直没提 Recoil

89
00:04:53,330 --> 00:04:55,243
其实是有原因

90
00:04:55,244 --> 00:04:59,743
我觉得 Recoil 对于一般的 React App 来说是不必要的

91
00:04:59,744 --> 00:05:01,643
我看过介绍 Recoil 的视频

92
00:05:01,644 --> 00:05:04,985
我感觉，嗯~挺不错的

93
00:05:04,986 --> 00:05:09,839
但是，我会觉得它是为了 Facebook 度身定制的

94
00:05:09,840 --> 00:05:13,714
如果我遇到类似的问题，我才会用它

95
00:05:13,715 --> 00:05:16,913
直到现在，我都不太会用到它

96
00:05:16,914 --> 00:05:19,871
回到最开始的问题，你是否应该学习 Redux

97
00:05:19,872 --> 00:05:23,760
我觉得，如果你能够决定项目里技术的选型

98
00:05:23,780 --> 00:05:27,200
我不会选 Redux，因为有更好的选择

99
00:05:27,200 --> 00:05:29,713
但你并不是总有这样的权力

100
00:05:29,714 --> 00:05:32,640
尽管 Redux 在社交媒体上已经不怎么受欢迎了

101
00:05:32,650 --> 00:05:35,057
但还是有很多公司在用它

102
00:05:35,058 --> 00:05:36,714
如果你现在是一名 React 开发者

103
00:05:36,715 --> 00:05:38,771
或者你正打算走这条路

104
00:05:38,772 --> 00:05:42,114
你可能在职业生涯里躲不过 Redux

105
00:05:42,115 --> 00:05:45,360
可能在某个节点，你不得不去学它

106
00:05:45,390 --> 00:05:49,040
但我还是建议你能不学就不学

107
00:05:49,040 --> 00:05:51,800
不管怎样，对不得不使用 Redux 的你

108
00:05:51,801 --> 00:05:53,471
我想说，祝你好运

109
00:05:53,472 --> 00:05:57,200
试试 Redux Toolkit 或者 Redux Query

110
00:05:57,200 --> 00:05:59,543
希望你不会因此患上 RSI (重复性压迫损伤)

111
00:05:59,544 --> 00:06:02,000
记住，小心使用 Redux

112
00:06:02,001 --> 00:06:04,386
你应该不想你的代码看起来像

113
00:06:04,387 --> 00:06:05,057
我的头发（一样乱）

